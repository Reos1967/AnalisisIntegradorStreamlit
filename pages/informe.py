import pandas as pd
import streamlit as st
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np


#Configuramos encabezado de pagina
st.set_page_config(
    page_title="Analisis del CO2 y el PIB",
    initial_sidebar_state="expanded",
    layout="centered",
    page_icon="üåé"
)

#Visualizaci√≥n
st.title("Evoluci√≥n Global del CO‚ÇÇ y el PIB (2000-2023): An√°lisis y Relevancia para las Pol√≠ticas P√∫blicas en Colombia")
ruta = "Data/tabla.csv"
df = pd.read_csv(ruta)
tex = "Este estudio presenta un an√°lisis de los datos relevantes sobre la generaci√≥n de CO‚ÇÇ y el PIB a nivel mundial desde el a√±o 2000 hasta 2023. Se examina la correlaci√≥n y variabilidad de estos indicadores en el contexto de su evoluci√≥n global. El objetivo es comprender estos cambios para orientar el dise√±o y evaluaci√≥n de pol√≠ticas p√∫blicas en Colombia, con un enfoque en los distintos sectores industriales."
st.write(df, tex)

with st.sidebar:
        col1, col2 = st.columns(2)
        with col1: 
            st.page_link("app.py", label="Home", icon="üèöÔ∏è")
            st.page_link("pages\informe.py", label="infor", icon="üìù")
        with col2:
            st.header("Analisis del CO2 y el PIB")
            
#selector de gr√°ficos
st.header('Visualizador de Gr√°ficos') 
tipo = st.selectbox('Seleccione el tipo de gr√°fico', ["Emisiones de CO‚ÇÇ en relaci√≥n con el PIB", "Tendencia de Emisiones de CO2 por Sector Industrial", "Evoluci√≥n del Cambio de Temperatura Global Atribuido al CO2", "Emisiones totales de CO2 vs A√±o", "Relaci√≥n entre PIB y Emisiones de CO‚ÇÇ per c√°pita"] )
#selector de variables a comparar
#variable = st.selectbox('Seleccione la variable a comparar', df.columns[1:].values)

if tipo == 'Emisiones de CO‚ÇÇ en relaci√≥n con el PIB':    
     # Mostrar un texto antes del gr√°fico
    st.write("### Relaci√≥n entre el PIB y las emisiones totales de CO‚ÇÇ en 2022")
    st.write("Se muestra la relaci√≥n entre el Producto Interno Bruto (PIB) y las emisiones totales de CO‚ÇÇ para el a√±o 2022. Se puede observar c√≥mo las econom√≠as m√°s grandes tienden a tener mayores emisiones.")

    # Filtrar datos del a√±o 2022
    df_GDP_2022 = df[df['year'] == 2022]  

    # Estilo de la gr√°fica
    sns.set_style('darkgrid')

    # Crear la figura y los ejes
    fig, ax = plt.subplots(figsize=(9, 5))

    # Graficar diagrama de dispersi√≥n
    ax.scatter(df_GDP_2022['gdp'], df_GDP_2022['co2'], color='r', marker='o')

    # Personalizar la gr√°fica
    ax.set_title('PIB vs Emisiones totales de CO2 en 2022')
    ax.set_xlabel('PIB')
    ax.set_ylabel('Emisiones totales de CO2')

    # Mostrar la figura en Streamlit
    st.pyplot(fig)
    
elif tipo == 'Tendencia de Emisiones de CO2 por Sector Industrial':
    # Agregar texto introductorio
    st.write("### Tendencia de Emisiones de CO‚ÇÇ por Sector Industrial")
    st.write("Se muestra c√≥mo han evolucionado las emisiones de CO‚ÇÇ en distintos sectores industriales a lo largo del tiempo. Se pueden identificar tendencias clave y analizar qu√© sectores han contribuido m√°s a las emisiones.")

    # Emisiones de CO‚ÇÇ por sector industrial.
    # Filtrar solo las columnas necesarias
    columns_to_plot = ["year", "cement_co2", "coal_co2", "flaring_co2", "gas_co2", "oil_co2", "other_industry_co2"]
    df_filtered = df[columns_to_plot]

    # Agrupar por a√±o y sumar emisiones de cada sector
    df_grouped = df_filtered.groupby("year").sum()

    # Crear la figura y los ejes
    fig, ax = plt.subplots(figsize=(12, 6))

    # Graficar las emisiones por sector
    for column in columns_to_plot[1:]:  # Excluir "year"
        ax.plot(df_grouped.index, df_grouped[column], label=column.replace("_co2", "").capitalize())

    # Personalizar la gr√°fica
    ax.set_title("Tendencia de Emisiones de CO2 por Sector Industrial")
    ax.set_xlabel("A√±o")
    ax.set_ylabel("Emisiones de CO‚ÇÇ (toneladas)")
    ax.legend()
    ax.grid(True)

    # Mostrar la figura en Streamlit
    st.pyplot(fig) 

elif tipo == 'Evoluci√≥n del Cambio de Temperatura Global Atribuido al CO2': 
    # Agregar texto introductorio
    st.write("### Evoluci√≥n del Cambio de Temperatura Global Atribuido al CO‚ÇÇ")
    st.write(
        "Se muestra c√≥mo ha evolucionado el cambio de temperatura global "
        "atribuido a las emisiones de CO‚ÇÇ a lo largo de los a√±os. "
        "El incremento en la temperatura es un indicador clave del impacto del CO‚ÇÇ "
        "en el cambio clim√°tico.")
    
    # Agrupar por a√±o y calcular el promedio del cambio de temperatura atribuido al CO‚ÇÇ
    df_temp_trend = df.groupby("year")["temperature_change_from_co2"].mean()

    # Crear la figura y los ejes
    fig, ax = plt.subplots(figsize=(12, 6))

    # Graficar la evoluci√≥n del cambio de temperatura
    ax.plot(df_temp_trend.index, df_temp_trend.values, marker="o", linestyle="-", color="r")

    # Personalizar la gr√°fica
    ax.set_title("Evoluci√≥n del Cambio de Temperatura Global Atribuido al CO2")
    ax.set_xlabel("A√±o")
    ax.set_ylabel("Cambio de Temperatura (¬∞C)")
    ax.grid(True, linestyle="--", alpha=0.5)

    # Mostrar la figura en Streamlit
    st.pyplot(fig)  

elif tipo == 'Emisiones totales de CO2 vs A√±o':
      # Agregar texto introductorio
    st.write("### Emisiones Totales de CO‚ÇÇ vs A√±o")
    st.write(
        "Se muestra la evoluci√≥n de las emisiones totales de CO‚ÇÇ en Brasil, "
        "M√©xico, Argentina y Colombia a lo largo del tiempo. "
        "El an√°lisis de estas tendencias nos permite entender c√≥mo han cambiado las emisiones "
        "en cada pa√≠s y c√≥mo pueden estar relacionadas con el crecimiento econ√≥mico y las pol√≠ticas ambientales.")
    
    # Filtrar datos por pa√≠s
    data_Brazil = df[df['country'] == 'Brazil']
    data_Mexico = df[df['country'] == 'Mexico']
    data_Argentina = df[df['country'] == 'Argentina']
    data_Colombia = df[df['country'] == 'Colombia']

    # Crear la figura y los ejes
    fig, ax = plt.subplots(figsize=(10, 6))

    # Graficar evoluci√≥n de emisiones de CO‚ÇÇ
    ax.plot(data_Brazil['year'], data_Brazil['co2'], '-', color='#FF0000', linewidth=3, label='Brazil')
    ax.plot(data_Mexico['year'], data_Mexico['co2'], '-', color='#0000FF', linewidth=3, label='Mexico')
    ax.plot(data_Argentina['year'], data_Argentina['co2'], '-', color='#FFA500', linewidth=3, label='Argentina')
    ax.plot(data_Colombia['year'], data_Colombia['co2'], '-', color='#8E44AD', linewidth=3, label='Colombia')

    # Personalizar la gr√°fica
    ax.set_xlabel('A√±o')
    ax.set_ylabel('Emisiones totales de CO2 (millones de toneladas)')
    ax.set_title('Emisiones totales de CO2 vs A√±o')
    ax.legend()
    ax.grid(True, linestyle="--", alpha=0.5)

    # Mostrar la figura en Streamlit
    st.pyplot(fig)

else:
    # Agregar texto introductorio
    st.write("### Relaci√≥n entre PIB y Emisiones de CO‚ÇÇ per c√°pita")
    st.write(
        "Se muestra la cantidad de CO‚ÇÇ emitido por persona en los 10 pa√≠ses con mayor PIB. "
        "Se comparan las emisiones derivadas de diferentes fuentes de energ√≠a: carb√≥n, petr√≥leo y gas. "
        "Analizar estos datos permite identificar qu√© econom√≠as tienen una mayor dependencia de combustibles f√≥siles "
        "y c√≥mo esto impacta en sus emisiones per c√°pita.")

    # Filtrar los 10 pa√≠ses con mayor PIB
    df_gdp_top10 = df.groupby("country", as_index=False).agg({
    "gdp": "max",  # Seleccionar el mayor PIB registrado por pa√≠s
    "coal_co2_per_capita": "mean",  # Promedio de emisiones por carb√≥n
    "oil_co2_per_capita": "mean",  # Promedio de emisiones por petr√≥leo
    "gas_co2_per_capita": "mean"  # Promedio de emisiones por gas
    }).nlargest(10, "gdp")  # Seleccionar los 10 pa√≠ses con mayor PIB

    # Definir ancho de las barras
    w = 0.25  

    # Convertir datos a numpy arrays
    x = np.asarray(df_gdp_top10["country"])  # Usar nombres de pa√≠ses
    y_carbon = np.asarray(df_gdp_top10["coal_co2_per_capita"])
    y_petroleo = np.asarray(df_gdp_top10["oil_co2_per_capita"])
    y_gas = np.asarray(df_gdp_top10["gas_co2_per_capita"])

    # Definir posiciones de las barras
    bar1 = np.arange(len(x))  
    bar2 = bar1 + w  
    bar3 = bar2 + w  

    # Crear la figura y los ejes
    fig, ax = plt.subplots(figsize=(12, 6))

    # Graficar las barras correctamente alineadas
    ax.bar(bar1, y_carbon, w, label="Carb√≥n", color="red")
    ax.bar(bar2, y_petroleo, w, label="Petr√≥leo", color="blue")
    ax.bar(bar3, y_gas, w, label="Gas", color="green")

    # Personalizar la gr√°fica
    ax.set_xlabel("PA√çSES")
    ax.set_ylabel("CO2 PER C√ÅPITA")
    ax.set_title("RELACI√ìN ENTRE PIB Y EMISIONES DE CO2 PER C√ÅPITA")

    # Ajustar etiquetas del eje X
    ax.set_xticks(bar1 + w)  
    ax.set_xticklabels(x, rotation=45)  

    # Agregar leyenda y cuadr√≠cula
    ax.legend()
    ax.grid(axis="y", linestyle="--", alpha=0.5)

    # Mostrar la figura
    st.pyplot(fig)    
